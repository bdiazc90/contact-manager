{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "9wPbUVtMivyMQQzfEfYpZ",
      "type": "text",
      "x": 328.0877432725913,
      "y": 358.83966261267926,
      "width": 893.1996459960938,
      "height": 1155,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1212459406,
      "version": 1537,
      "versionNonce": 1973125906,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1741829500402,
      "link": null,
      "locked": false,
      "text": "REACT:\n\n- Data Fetching: \n   - Obtener contactos, enviar\n     datos a un Backend. Con el objetivo de\n     trabajar con Persistencia de Datos.\n- State Managment: \n   - Lo hemos usado para guardar un valor,\n     con el cuál puedo condicionar ciertas\n     acciones.\n   - Guardar y manejar data.\n     Por ejemplo, los contactos obtenidos.\n   - Gestionar los datos de un Formulario.\n- Formularios Controlados:\n   - Validación temprana.\n   - usamos el evento onChage en cada campo.\n   - Es recomendable considerar principios DRY.\n   - Usualmente, la implementación es más larga/compleja\n     vs. un Formulario NO controlado.\n- Funciones como Props:\n- Arquitectura de componentes:\n- Gestión de promesas:\n    - Para estos escenarios impredescibles, usamos:\n        try/catch\n    - 3 estados: Pending, Fullfilled, Rejected.\n- Asíncronia:\n    - Se logra gracias al sistema: Javascript Runtime.\n    - Event Loop: Proceso que siempre está buscando en:\n        - Task Queue (Cola de tareas).\n        - MicroTask Queue (Cola de MicroTareas) PRIORIDAD.\n    - Se simula una ejecución con paralelismo, pero\n        que NO es multi-hilo.\n",
      "fontSize": 28,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "REACT:\n\n- Data Fetching: \n   - Obtener contactos, enviar\n     datos a un Backend. Con el objetivo de\n     trabajar con Persistencia de Datos.\n- State Managment: \n   - Lo hemos usado para guardar un valor,\n     con el cuál puedo condicionar ciertas\n     acciones.\n   - Guardar y manejar data.\n     Por ejemplo, los contactos obtenidos.\n   - Gestionar los datos de un Formulario.\n- Formularios Controlados:\n   - Validación temprana.\n   - usamos el evento onChage en cada campo.\n   - Es recomendable considerar principios DRY.\n   - Usualmente, la implementación es más larga/compleja\n     vs. un Formulario NO controlado.\n- Funciones como Props:\n- Arquitectura de componentes:\n- Gestión de promesas:\n    - Para estos escenarios impredescibles, usamos:\n        try/catch\n    - 3 estados: Pending, Fullfilled, Rejected.\n- Asíncronia:\n    - Se logra gracias al sistema: Javascript Runtime.\n    - Event Loop: Proceso que siempre está buscando en:\n        - Task Queue (Cola de tareas).\n        - MicroTask Queue (Cola de MicroTareas) PRIORIDAD.\n    - Se simula una ejecución con paralelismo, pero\n        que NO es multi-hilo.\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "9IMvIDEIm6oZOmt-NGKrK",
      "type": "text",
      "x": 1708.623083581591,
      "y": 777.4191176127672,
      "width": 1405.79931640625,
      "height": 1395,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 2064182630,
      "version": 931,
      "versionNonce": 1618601190,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1741832311932,
      "link": null,
      "locked": false,
      "text": "try {\n    const response = await fetch('...'); // devuelve una Promesa.\n\n    // el AWAIT es la palabra clave, que esperará que la promea\n    // cambie de Pending a otro estado (Fullfilled, Rejected).\n\n\n    // Tuvo exito (Fullfilled)\n    // response, es el objeto de la respuesta, tiene mucha información.\n\n    const datos = await response.json(); \n    // Intenta convertir una cadena en formato JSON\n    // a un objeto de JS.\n\n} catch (e) {\n    // Puedo recibir el error de la primera Promesa (fetch)\n    // o Puedo recibir el error de la segunda Promesa (.json)\n    \n    console.log(e);\n    // Si el error es el intento del .json:\n    if (e === '') {\n        setErrorMessage(\"Los datos tienen un formato incorrecto\");\n    }\n    \n    // Si el error es el intento del fetch:\n    if (e === '') {\n        setErrorMessage(\"La API no responde\");\n    }\n\n}\n",
      "fontSize": 36,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "try {\n    const response = await fetch('...'); // devuelve una Promesa.\n\n    // el AWAIT es la palabra clave, que esperará que la promea\n    // cambie de Pending a otro estado (Fullfilled, Rejected).\n\n\n    // Tuvo exito (Fullfilled)\n    // response, es el objeto de la respuesta, tiene mucha información.\n\n    const datos = await response.json(); \n    // Intenta convertir una cadena en formato JSON\n    // a un objeto de JS.\n\n} catch (e) {\n    // Puedo recibir el error de la primera Promesa (fetch)\n    // o Puedo recibir el error de la segunda Promesa (.json)\n    \n    console.log(e);\n    // Si el error es el intento del .json:\n    if (e === '') {\n        setErrorMessage(\"Los datos tienen un formato incorrecto\");\n    }\n    \n    // Si el error es el intento del fetch:\n    if (e === '') {\n        setErrorMessage(\"La API no responde\");\n    }\n\n}\n",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}